<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PingPal | Chat</title>
    <style>
      .logo {
        max-width: 50%;
      }
      .navbar {
        z-index: 1 !important;
      }

      main {
        padding-top: 80px !important;
      }

      .form-control {
        border: none !important;
        box-shadow: 0px 10px 30px #00000020 !important;
      }
      body {
        background: url("/assets/bg.png");
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
      }
    </style>
  </head>
  <body class="">
    <%- include('./includes/header.ejs') %>

    <main class="container mt-4">
      <h5 class="fixed-top w-100 start-0 top-0 z-3 bg-white p-4">
        <div class="container">
          <a href="/dashboard" class="text-black me-3"
            ><i class="fa fa-arrow-left fs-5" aria-hidden="true"></i
          ></a>
          <i class="fa fa-user-circle fs-5" aria-hidden="true"></i>
          <%= recipientUsername %>
        </div>
      </h5>

      <div id="chatWindow" class="chat-window" style="padding-bottom: 80px">
        <% chats.forEach(chat => { %>
        <div class="<%= chat.sender.equals(user._id) ? 'sent' : 'received' %>">
          <p><%= chat.message %></p>
          <!-- <span class="message-time"><%= chat.timestamp %></span> -->
        </div>
        <% }); %>
      </div>

      <!-- Message Input -->
      <div class="input-group mt-4 fixed-bottom">
        <input
          type="text"
          id="messageInput"
          class="form-control p-3 rounded-0"
          placeholder="Type your message..."
        />
        <button onclick="sendMessage()" class="btn btn-primary rounded-0">
          Send
        </button>
      </div>
    </main>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      const senderId = "<%= user._id %>";
      const recipientId = "<%= recipientId %>";

      // Join the chat room for this conversation
      socket.emit("joinChat", { senderId, recipientId });

      // Listen for new messages
      socket.on("newMessage", (data) => {
        console.log("New message received:", data);
        const chatWindow = document.getElementById("chatWindow");
        const messageElement = document.createElement("div");
        messageElement.className =
          data.senderId === senderId ? "sent" : "received";
        messageElement.innerHTML = `<p>${data.message}</p>`;
        chatWindow.appendChild(messageElement);
      });

      // Function to send a message
      function sendMessage() {
        const message = document.getElementById("messageInput").value.trim();
        if (message) {
          socket.emit("sendMessage", {
            senderId,
            recipientId,
            message,
          });

          // Append the message immediately for the sender
          const chatWindow = document.getElementById("chatWindow");
          const messageElement = document.createElement("div");
          messageElement.className = "sent";
          messageElement.innerHTML = `<p>${message}</p>`;
          chatWindow.appendChild(messageElement);

          document.getElementById("messageInput").value = "";
        }
      }

      // Add event listener for Enter key
      document
        .getElementById("messageInput")
        .addEventListener("keydown", function (event) {
          if (event.key === "Enter" && !event.shiftKey) {
            event.preventDefault(); // Prevent new line insertion
            sendMessage(); // Call sendMessage function
          }
        });

      // Optional: Add event listener for Send button
      document
        .querySelector(".btn-primary")
        .addEventListener("click", function () {
          sendMessage();
        });
    </script>

    <%- include('./includes/footer.ejs') %>
  </body>
</html>
